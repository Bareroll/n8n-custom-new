{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -4660,
        1560
      ],
      "id": "6362fc53-867b-4edb-aa86-8c05865afec9",
      "name": "When clicking 'Execute workflow'"
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "id": "1a88c04a-8389-4494-870a-ea9185ff7474",
      "name": "Merge Video Metadata",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        -3340,
        2040
      ]
    },
    {
      "parameters": {
        "functionCode": "return [{\n  json: {\n    ...$json,\n    videoFile: $json.videoFile || $item(0).$json.videoFile\n  }\n}];"
      },
      "id": "ca3e248f-a026-405e-9f64-be288ea110a6",
      "name": "Restore videoFile Property",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -3140,
        2040
      ]
    },
    {
      "parameters": {
        "functionCode": "return [{\n  json: {\n    url: $json.url,\n    videoFile: $json.videoFile,\n    formattedVideoCommand: `yt-dlp -q --no-progress -f \"bestvideo[height<=480]+bestaudio/best[height<=480]\" \"${$json.url}\" -o \"${$json.videoFile}\" --force-overwrites --recode-video mp4`\n  }\n}];"
      },
      "id": "db4ca734-046e-4086-aaeb-5efa9ece5da7",
      "name": "Format Download Commands",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -3660,
        2060
      ]
    },
    {
      "parameters": {
        "functionCode": "const now = Date.now();\nreturn [{\n  json: {\n    url: $json.url,\n    videoFile: `/tmp/video_${now}.mp4`\n  }\n}];"
      },
      "id": "39479c8e-f82e-428a-8bb4-dcd7625a25c9",
      "name": "Generate Unique Filenames",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -4040,
        1560
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "url",
              "value": "https://www.youtube.com/watch?v=SiZXRScxbl0"
            }
          ]
        },
        "options": {}
      },
      "id": "d83b0cff-ca03-4438-b877-b920419edfd0",
      "name": "Set YouTube URL1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -4300,
        1560
      ]
    },
    {
      "parameters": {
        "command": "={{ $json.formattedVideoCommand }}"
      },
      "id": "7ba43411-1822-4c1c-b511-9a4c8ede6682",
      "name": "Download Video",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -3480,
        1840
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "if (!$json.videoFile) { throw new Error('videoFile is undefined!'); }\nconsole.log('videoFile path:', $json.videoFile);\nreturn $input.item;"
      },
      "id": "93757ef9-4d5b-4683-854f-e35e5e1a638c",
      "name": "Debug Video File Path",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -3020,
        1800
      ]
    },
    {
      "parameters": {
        "filePath": "={{ $json.videoFile }}"
      },
      "id": "44a60376-406e-4335-85b7-0dc9d07d5c15",
      "name": "Read Video File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        -2780,
        2040
      ]
    },
    {
      "parameters": {
        "functionCode": "console.log('Video binary data:', $binary);\nreturn $input.item;"
      },
      "id": "c0c82329-92ac-4d1f-91b3-cd560633a5e6",
      "name": "Debug Video Binary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2660,
        1800
      ]
    },
    {
      "parameters": {
        "functionCode": "const now = Date.now();\nconst audioFile = `/tmp/workspace/audio_${now}.mp3`;\nconst transcriptFile = `/tmp/workspace/transcript_${now}.txt`;\n\nreturn [{\n  json: {\n    ...$json,\n    audioFile: audioFile,\n    transcriptFile: transcriptFile,\n    formattedAudioCommand: `yt-dlp -q --no-progress -x --audio-format mp3 \"${$json.url}\" -o \"${audioFile}\" --force-overwrites`\n  }\n}];"
      },
      "id": "b34e7afb-a679-405b-aa1e-7a5e4ec13fea",
      "name": "Format Download Command",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -3640,
        1300
      ]
    },
    {
      "parameters": {
        "command": "={{ $json.formattedAudioCommand }}"
      },
      "id": "178c8f96-669c-46ca-9be0-b07da9790078",
      "name": "Download Audio",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -3460,
        1420
      ]
    },
    {
      "parameters": {
        "filePath": "={{ $json.audioFile }}"
      },
      "id": "b42af71e-546a-4183-8f37-9d9a51e9a246",
      "name": "Read Binary File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        -2780,
        1320
      ]
    },
    {
      "parameters": {
        "functionCode": "console.log('Binary data:', $binary);\nreturn $input.item;"
      },
      "id": "8227c21a-87d7-41f5-9347-bf27521ad4c2",
      "name": "Debug Binary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2660,
        1520
      ]
    },
    {
      "parameters": {
        "functionCode": "return [{\n  json: {\n    ...$json,\n    audioFile: $json.audioFile || $item(0).$json.audioFile\n  }\n}];"
      },
      "id": "3789e059-e685-4ebb-b19c-b8ea65ff1348",
      "name": "Restore videoFile Property1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -3000,
        1320
      ]
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "id": "daf4fc06-e49e-445e-bd0c-81508851fb89",
      "name": "Merge Video Metadata1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        -3240,
        1320
      ]
    },
    {
      "parameters": {
        "functionCode": "const now = Date.now();\nconst baseFile = `/tmp/workspace/transcript_${now}`;\n// yt-dlp will add '.en.vtt' to the base filename. This is the file we need to read.\nconst finalFile = `${baseFile}.en.vtt`; \n\n// In the command, we tell yt-dlp to use the base name. It will add its own extensions.\nconst command = `yt-dlp --write-auto-subs --sub-lang en --skip-download -o \"${baseFile}\" \"${$json.url}\"`;\n\nreturn [{\n  json: {\n    ...$json,\n    // Pass the *actual* filename to the next nodes\n    transcriptFile: finalFile, \n    ytDlpSubsCommand: command\n  }\n}];"
      },
      "id": "dde2c3d0-b5bd-4752-bdd0-2b6d38d54fff",
      "name": "Format YTDLP Subs Command",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -4160,
        940
      ]
    },
    {
      "parameters": {
        "command": "={{$json.ytDlpSubsCommand}}"
      },
      "id": "e368ced8-1332-40f2-b941-3e34c35c75f5",
      "name": "Get Subs with YTDLP",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -3960,
        800
      ]
    },
    {
      "parameters": {
        "filePath": "={{ $json.transcriptFile }}"
      },
      "id": "98050631-8812-4227-b783-bfee036a7db3",
      "name": "Read Transcript File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        -3460,
        900
      ]
    },
    {
      "parameters": {
        "functionCode": "const vttContent = Buffer.from($input.item.binary.data.data, 'base64').toString('utf8');\nconst lines = vttContent.split('\\n');\nconst captions = [];\nlet i = 0;\n\nwhile (i < lines.length) {\n  const line = lines[i];\n  const tsMatch = line.match(/^(\\d{2}:\\d{2}:\\d{2}\\.\\d{3})\\s+-->/);\n  if (tsMatch) {\n    const nextLine = (i + 1 < lines.length) ? lines[i + 1].trim() : '';\n    if (nextLine && !nextLine.startsWith('WEBVTT')) {\n      const cleanLine = nextLine.replace(/<[^>]+>/g, '').replace(/\\s+/g, ' ').trim();\n      if (cleanLine) {\n        captions.push(cleanLine);\n      }\n    }\n  }\n  i++;\n}\n\n// Remove consecutive duplicate lines\nconst deduped = [];\nfor (let i = 0; i < captions.length; i++) {\n  if (i === 0 || captions[i] !== captions[i - 1]) {\n    deduped.push(captions[i]);\n  }\n}\nconst output = deduped.join(' | ');\n\nreturn [{\n  binary: {\n    data: Buffer.from(output, 'utf8')\n  },\n  json: {\n    transcript: output // Only output the plain text\n  }\n}];"
      },
      "id": "ae39ff45-6c95-4156-8712-766cad126d2d",
      "name": "Clean VTT Transcript",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -3220,
        900
      ]
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "id": "f90e5766-f583-4a05-b0a0-1b947021c5be",
      "name": "Merge Video Metadata2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        -3700,
        900
      ]
    },
    {
      "parameters": {
        "content": "## Download video",
        "height": 480,
        "width": 1260,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3700,
        1740
      ],
      "typeVersion": 1,
      "id": "1a07cdc2-fd63-4da7-826a-550c7f8e6dbc",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Download Audio\n",
        "height": 440,
        "width": 1240,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3680,
        1220
      ],
      "typeVersion": 1,
      "id": "612ab2a4-0cc4-4886-83cb-bed673b52e08",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Download Transcript\n",
        "height": 460,
        "width": 1400,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4200,
        660
      ],
      "typeVersion": 1,
      "id": "1cffed84-bc32-451c-bda5-2cc038c064db",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -2740,
        1080
      ],
      "id": "77d2a4c6-8c20-49b4-b2dd-91026b29dca5",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "4Lip5gzZ7eiqN4ZK",
          "name": "DeepSeek account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const vttContent = Buffer.from($input.item.binary.data.data, 'base64').toString('utf8');\nconst lines = vttContent.split('\\n');\nconst blocks = [];\nlet i = 0;\n\nwhile (i < lines.length) {\n  // Match timestamp lines\n  const tsMatch = lines[i].match(/^(\\d{2}:\\d{2}:\\d{2}\\.\\d{3}) --> (\\d{2}:\\d{2}:\\d{2}\\.\\d{3})/);\n  if (tsMatch) {\n    const timestamp = `${tsMatch[1]} --> ${tsMatch[2]}`;\n    // Find the next non-empty line (caption text)\n    let text = '';\n    let j = i + 1;\n    while (j < lines.length && lines[j].trim() === '') j++;\n    if (j < lines.length) {\n      text = lines[j].replace(/<[^>]+>/g, '').replace(/\\s+/g, ' ').trim();\n      // Only accept if the line does NOT contain inline <c> tags or any other tags and is not empty\n      if (text && !lines[j].includes('<c>') && !lines[j].includes('<')) {\n        blocks.push({ timestamp, text });\n      }\n    }\n    i = j;\n  } else {\n    i++;\n  }\n}\n\n// Remove consecutive duplicate captions (with timestamps)\nconst dedupedBlocks = [];\nfor (let k = 0; k < blocks.length; k++) {\n  if (k === 0 || blocks[k].text !== blocks[k - 1].text) {\n    dedupedBlocks.push(blocks[k]);\n  }\n}\n\n// Format for file output\nconst output = dedupedBlocks.map(b => `[${b.timestamp}]\\n${b.text}`).join('\\n\\n');\n\nreturn [{\n  json: {\n    blocks: dedupedBlocks,\n    transcriptWithTimestamps: output\n  },\n  binary: {\n    data: Buffer.from(output, 'utf8')\n  }\n}];"
      },
      "id": "4e614819-8f17-44b0-b199-b32606842743",
      "name": "Clean VTT Transcript (Caps)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -3220,
        700
      ]
    },
    {
      "parameters": {
        "functionCode": "const content = Buffer.from($input.item.binary.data.data, 'base64').toString('utf8');\nreturn [{ json: { content } }];"
      },
      "id": "8c144792-6ba7-4b21-930d-4c4b41e0090b",
      "name": "Convert Transcript to Text",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2960,
        900
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Translate the following transcript to Chinese. Keep the format unchanged.\n{{ $json.content }}",
        "options": {}
      },
      "id": "89f3b3ad-b065-4ee0-aeea-a1ab66f1a8e3",
      "name": "AI Agent Translate Transcript",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -2740,
        900
      ]
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "id": "ab635a2e-f8b0-40f6-a55c-846b911a3d35",
      "name": "Merge Audio with Translated Transcript",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        -1140,
        1300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Combine audio file with translated transcript\nconst audioFile = $item(0).$json.audioFile;\nconst translatedTranscript = $item(1).$json.output || $item(1).$json.text || $item(1).$json.content;\n\nreturn [{\n  json: {\n    audioFile: audioFile,\n    translatedTranscript: translatedTranscript,\n    // You can add more processing here like creating a subtitle file\n    subtitleFile: `/tmp/workspace/subtitles_${Date.now()}.srt`\n  }\n}];"
      },
      "id": "a5b59921-024e-442d-a0c1-c6cb3ae129f4",
      "name": "Combine Audio and Transcript",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1400,
        1300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Create SRT subtitle file from translated transcript\nconst translatedTranscript = $json.translatedTranscript;\nconst subtitleFile = $json.subtitleFile;\n\n// Split transcript into sentences and create SRT format\nconst sentences = translatedTranscript.split(/[.!?]+/).filter(s => s.trim().length > 0);\nlet srtContent = '';\n\nsentences.forEach((sentence, index) => {\n  const startTime = index * 3; // 3 seconds per sentence\n  const endTime = startTime + 3;\n  const startTimeStr = `${Math.floor(startTime / 60).toString().padStart(2, '0')}:${(startTime % 60).toString().padStart(2, '0')}:00,000`;\n  const endTimeStr = `${Math.floor(endTime / 60).toString().padStart(2, '0')}:${(endTime % 60).toString().padStart(2, '0')}:00,000`;\n  \n  srtContent += `${index + 1}\\n${startTimeStr} --> ${endTimeStr}\\n${sentence.trim()}\\n\\n`;\n});\n\nreturn [{\n  json: {\n    ...$json,\n    srtContent: srtContent\n  },\n  binary: {\n    data: Buffer.from(srtContent, 'utf8'),\n    fileName: subtitleFile.split('/').pop()\n  }\n}];"
      },
      "id": "8c143b5d-c788-4cec-a921-d97ed48a9244",
      "name": "Create Subtitle File",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1660,
        1260
      ]
    },
    {
      "parameters": {
        "fileName": "={{ $json.subtitleFile }}",
        "options": {}
      },
      "id": "3bb724ec-c11b-42aa-92f9-e4cb2cd1d15f",
      "name": "Write Subtitle File",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        -1880,
        1260
      ]
    },
    {
      "parameters": {
        "functionCode": "// Prepare text for TTS\nconst translatedText = $json.output || $json.text || $json.content;\n// Clean the text for better TTS quality\nconst cleanText = translatedText.replace(/[\\n\\r]/g, ' ').replace(/\\s+/g, ' ').trim();\n\nreturn [{\n  json: {\n    ...$json,\n    text: cleanText,\n    voice_id: \"21m00Tcm4TlvDq8ikWAM\", // Rachel voice ID for Chinese\n    model_id: \"eleven_multilingual_v2\"\n  }\n}];"
      },
      "id": "f6407f6e-727f-47eb-8ed1-a447db6019cf",
      "name": "Prepare Text for TTS",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2340,
        900
      ]
    },
    {
      "parameters": {
        "command": "ffmpeg -i \"{{ $json.videoFile }}\" -i \"{{ $json.chineseAudioFile }}\" -map 0:v -map 1:a -c:v copy -c:a aac -shortest \"{{ $json.outputVideoFile }}\""
      },
      "id": "903f8778-14bf-4955-8b68-60722c76fd61",
      "name": "Replace Audio with Chinese",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1240,
        1800
      ]
    },
    {
      "parameters": {
        "functionCode": "// Generate output filenames\nconst now = Date.now();\nconst chineseAudioFile = `/tmp/workspace/chinese_audio_${now}.mp3`;\nconst outputVideoFile = `/tmp/workspace/video_with_chinese_audio_${now}.mp4`;\n\nreturn [{\n  json: {\n    ...$json,\n    chineseAudioFile: chineseAudioFile,\n    outputVideoFile: outputVideoFile\n  }\n}];"
      },
      "id": "185b3493-f570-4b17-a2ed-0c314784a8ba",
      "name": "Prepare Output Files",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1720,
        900
      ]
    },
    {
      "parameters": {
        "fileName": "={{ $json.chineseAudioFile }}",
        "options": {}
      },
      "id": "fd0cd9bd-6d59-457e-a63b-aecaceaf6fb1",
      "name": "Save Chinese Audio",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        -1920,
        900
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get the original video file path\nconst videoFile = $item(0).$json.videoFile;\nconst chineseAudioFile = $json.chineseAudioFile;\nconst outputVideoFile = $json.outputVideoFile;\n\nreturn [{\n  json: {\n    videoFile: videoFile,\n    chineseAudioFile: chineseAudioFile,\n    outputVideoFile: outputVideoFile\n  }\n}];"
      },
      "id": "0f9a9fe1-259b-4d89-b255-d3905e6a341e",
      "name": "Prepare Video Replacement",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1500,
        1800
      ]
    },
    {
      "parameters": {
        "content": "## Translate ",
        "height": 380,
        "width": 1240,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2760,
        820
      ],
      "typeVersion": 1,
      "id": "c640068e-22c4-4d81-9741-76088a1a1d2a",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "Set YouTube URL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Video Metadata": {
      "main": [
        [
          {
            "node": "Restore videoFile Property",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Restore videoFile Property": {
      "main": [
        [
          {
            "node": "Debug Video File Path",
            "type": "main",
            "index": 0
          },
          {
            "node": "Read Video File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Download Commands": {
      "main": [
        [
          {
            "node": "Merge Video Metadata",
            "type": "main",
            "index": 1
          },
          {
            "node": "Download Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Unique Filenames": {
      "main": [
        [
          {
            "node": "Format Download Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "Format Download Commands",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set YouTube URL1": {
      "main": [
        [
          {
            "node": "Generate Unique Filenames",
            "type": "main",
            "index": 0
          },
          {
            "node": "Format YTDLP Subs Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Video": {
      "main": [
        [
          {
            "node": "Merge Video Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Video File": {
      "main": [
        [
          {
            "node": "Debug Video Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Download Command": {
      "main": [
        [
          {
            "node": "Download Audio",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Video Metadata1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Audio": {
      "main": [
        [
          {
            "node": "Merge Video Metadata1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Read Binary File": {
      "main": [
        [
          {
            "node": "Debug Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Restore videoFile Property1": {
      "main": [
        [
          {
            "node": "Read Binary File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Video Metadata1": {
      "main": [
        [
          {
            "node": "Restore videoFile Property1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format YTDLP Subs Command": {
      "main": [
        [
          {
            "node": "Get Subs with YTDLP",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Video Metadata2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Subs with YTDLP": {
      "main": [
        [
          {
            "node": "Merge Video Metadata2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Video Metadata2": {
      "main": [
        [
          {
            "node": "Read Transcript File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Transcript File": {
      "main": [
        [
          {
            "node": "Clean VTT Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean VTT Transcript": {
      "main": [
        [
          {
            "node": "Convert Transcript to Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent Translate Transcript",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert Transcript to Text": {
      "main": [
        [
          {
            "node": "AI Agent Translate Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Translate Transcript": {
      "main": [
        [
          {
            "node": "Prepare Text for TTS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Audio with Translated Transcript": {
      "main": [
        []
      ]
    },
    "Combine Audio and Transcript": {
      "main": [
        [
          {
            "node": "Merge Audio with Translated Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Subtitle File": {
      "main": [
        [
          {
            "node": "Combine Audio and Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Subtitle File": {
      "main": [
        [
          {
            "node": "Create Subtitle File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Text for TTS": {
      "main": [
        []
      ]
    },
    "Replace Audio with Chinese": {
      "main": [
        []
      ]
    },
    "Prepare Video Replacement": {
      "main": [
        [
          {
            "node": "Replace Audio with Chinese",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Chinese Audio": {
      "main": [
        [
          {
            "node": "Prepare Output Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Output Files": {
      "main": [
        [
          {
            "node": "Prepare Video Replacement",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a294d92b-c6c4-40ab-b665-cbbb8e72a3ed",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "94d74c911e13a49b3d100732caebd73d7ad1ccb444c81b5fed33dd3ea57d1e2f"
  },
  "id": "kH8N1XPmsTKuFQFT",
  "tags": []
}